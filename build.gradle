buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath group: 'com.h2database', name: 'h2', version: '1.4.197'
        classpath group: 'org.orbisgis', name: 'h2gis', version: '1.5.0'
        classpath group: 'org.apache.cayenne.plugins', name: 'cayenne-gradle-plugin', version: '4.1.1'
    }
}

plugins {
    id 'org.springframework.boot' version '2.6.7'
    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'java'
}

apply from: "$rootDir/gradle/versioning.gradle"
apply plugin: 'org.apache.cayenne'

group = 'ch.so.agi'

sourceCompatibility = '11'

repositories {
    maven { url "https://jars.interlis.ch" }
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'
  
    //implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    //runtimeOnly('com.h2database:h2')
    
    implementation 'ch.interlis:iox-ili:1.21.7' 
    implementation 'ch.interlis:ili2c-core:5.2.3'
    implementation 'ch.interlis:ili2c-tool:5.2.3'

    implementation 'commons-io:commons-io:2.11.0'

    implementation 'org.apache.cayenne:cayenne-server:4.1.1'
    implementation 'com.h2database:h2:1.4.197'
    implementation 'org.orbisgis:h2gis:1.5.0'

    developmentOnly 'org.springframework.boot:spring-boot-devtools'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
}

test {
    useJUnitPlatform()
}

bootBuildImage {
    builder = 'paketobuildpacks/builder:tiny'
    //environment = ['BP_NATIVE_IMAGE': 'true']
}

cayenne.defaultDataMap "$projectDir/src/main/resources/cayenne/datamap.map.xml"

cgen {
    client = false
    mode = 'entity'
    overwrite = true
    //createPKProperties = true
}

cdbimport {
    map "$projectDir/src/main/resources/cayenne/datamap.map.xml"
    
    cayenneProject "$projectDir/src/main/resources/cayenne/cayenne-project.xml"
    
    dataSource {
        driver 'org.h2.Driver'
        //url 'jdbc:h2:/Users/stefan/sources/ilicache-web-service/src/main/interlis/ilicache.mv.db'
        url "jdbc:h2:${projectDir}/src/main/interlis/ilicachedb"
        username ''
        password ''
    }

    dbImport {
        usePrimitives false
        defaultPackage 'ch.so.agi.ilicache.cayenne'
        schema {
            name 'PUBLIC'
            includeTable 'CLONEREPOSITORY'
            includeTable 'PEERREPOSITORY'
        }
    }
}
/*
dockerTest.finalizedBy('stopDockerContainer')
task updateDatamap(dependsOn: "exportData") {
    description = "Ersetzt verschiedene Elemente (Host, Pfad, etc.) der WMS-Requests."
    doLast {
        ant.replace(
        file: file(Paths.get("$rootDir", xtfFileName)),
        token: '${wmsHost}',
        value: 'https://' + geoservicesHostName,
        encoding: 'UTF-8')
    }
}*/


